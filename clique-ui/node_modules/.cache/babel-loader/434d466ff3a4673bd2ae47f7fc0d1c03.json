{"ast":null,"code":"var _jsxFileName = \"/Users/abhiaiyer/Projects/happyhour/clique-ui/src/components/RatingsWidget.js\";\nimport React from \"react\";\nimport { css } from \"emotion\";\nimport times from \"lodash.times\";\nimport RatingsIcon from \"./RatingsIcon\"; // http://phrogz.net/round-to-nearest-via-modulus-division\n\nfunction roundToNearest(number, multiple) {\n  var half = multiple / 2;\n  return (number + half - (number + half)) % multiple;\n}\n\nexport default function RatingsWidget(_ref) {\n  var currentRating = _ref.currentRating,\n      className = _ref.className,\n      iconSize = _ref.iconSize,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 5 : _ref$size;\n  var ratingSteps = [];\n  var rating = currentRating;\n  var roundRating = Math.round(roundToNearest(rating, 0.5));\n  var ceilRating = Math.ceil(roundRating);\n  times(size, function (val) {\n    var indexVal = val + 1;\n    var type = \"empty\";\n\n    if (indexVal <= rating) {\n      type = \"full\";\n    } else if (roundRating === indexVal && ceilRating) {\n      type = \"half\";\n    }\n\n    ratingSteps.push(React.createElement(RatingsIcon, {\n      iconSize: iconSize,\n      size: size,\n      readOnly: true,\n      step: indexVal,\n      type: type,\n      key: \"rating-step-\".concat(indexVal),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }));\n  });\n  return React.createElement(\"section\", {\n    className: css({\n      display: \"flex\"\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, ratingSteps);\n}","map":{"version":3,"sources":["/Users/abhiaiyer/Projects/happyhour/clique-ui/src/components/RatingsWidget.js"],"names":["React","css","times","RatingsIcon","roundToNearest","number","multiple","half","RatingsWidget","currentRating","className","iconSize","size","ratingSteps","rating","roundRating","Math","round","ceilRating","ceil","val","indexVal","type","push","display"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB,C,CAEA;;AACA,SAASC,cAAT,CAAwBC,MAAxB,EAAwCC,QAAxC,EAAkE;AAChE,MAAMC,IAAI,GAAGD,QAAQ,GAAG,CAAxB;AACA,SAAO,CAACD,MAAM,GAAGE,IAAT,IAAiBF,MAAM,GAAGE,IAA1B,CAAD,IAAoCD,QAA3C;AACD;;AAED,eAAe,SAASE,aAAT,OAKZ;AAAA,MAJDC,aAIC,QAJDA,aAIC;AAAA,MAHDC,SAGC,QAHDA,SAGC;AAAA,MAFDC,QAEC,QAFDA,QAEC;AAAA,uBADDC,IACC;AAAA,MADDA,IACC,0BADM,CACN;AACD,MAAMC,WAAW,GAAG,EAApB;AACA,MAAIC,MAAM,GAAGL,aAAb;AAEA,MAAMM,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWb,cAAc,CAACU,MAAD,EAAS,GAAT,CAAzB,CAApB;AACA,MAAMI,UAAU,GAAGF,IAAI,CAACG,IAAL,CAAUJ,WAAV,CAAnB;AAEAb,EAAAA,KAAK,CAACU,IAAD,EAAO,UAACQ,GAAD,EAAiB;AAC3B,QAAMC,QAAQ,GAAGD,GAAG,GAAG,CAAvB;AACA,QAAIE,IAAI,GAAG,OAAX;;AACA,QAAID,QAAQ,IAAIP,MAAhB,EAAwB;AACtBQ,MAAAA,IAAI,GAAG,MAAP;AACD,KAFD,MAEO,IAAIP,WAAW,KAAKM,QAAhB,IAA4BH,UAAhC,EAA4C;AACjDI,MAAAA,IAAI,GAAG,MAAP;AACD;;AAEDT,IAAAA,WAAW,CAACU,IAAZ,CACE,oBAAC,WAAD;AACE,MAAA,QAAQ,EAAEZ,QADZ;AAEE,MAAA,IAAI,EAAEC,IAFR;AAGE,MAAA,QAAQ,MAHV;AAIE,MAAA,IAAI,EAAES,QAJR;AAKE,MAAA,IAAI,EAAEC,IALR;AAME,MAAA,GAAG,wBAAiBD,QAAjB,CANL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAnBI,CAAL;AAqBA,SAAO;AAAS,IAAA,SAAS,EAAEpB,GAAG,CAAC;AAAEuB,MAAAA,OAAO,EAAE;AAAX,KAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA+CX,WAA/C,CAAP;AACD","sourcesContent":["import React from \"react\";\nimport { css } from \"emotion\";\nimport times from \"lodash.times\";\nimport RatingsIcon from \"./RatingsIcon\";\n\n// http://phrogz.net/round-to-nearest-via-modulus-division\nfunction roundToNearest(number: number, multiple: number): number {\n  const half = multiple / 2;\n  return (number + half - (number + half)) % multiple;\n}\n\nexport default function RatingsWidget({\n  currentRating,\n  className,\n  iconSize,\n  size = 5\n}) {\n  const ratingSteps = [];\n  let rating = currentRating;\n\n  const roundRating = Math.round(roundToNearest(rating, 0.5));\n  const ceilRating = Math.ceil(roundRating);\n\n  times(size, (val: number) => {\n    const indexVal = val + 1;\n    let type = \"empty\";\n    if (indexVal <= rating) {\n      type = \"full\";\n    } else if (roundRating === indexVal && ceilRating) {\n      type = \"half\";\n    }\n\n    ratingSteps.push(\n      <RatingsIcon\n        iconSize={iconSize}\n        size={size}\n        readOnly\n        step={indexVal}\n        type={type}\n        key={`rating-step-${indexVal}`}\n      />\n    );\n  });\n\n  return <section className={css({ display: \"flex\" })}>{ratingSteps}</section>;\n}\n"]},"metadata":{},"sourceType":"module"}